{"version":3,"sources":["components/data.js","components/get-initial-data.js","components/reorder.js","components/Item.js","components/Row.js","components/ItemList.js","components/Column.js","App.js","reportWebVitals.js","index.js"],"names":["startProducts","JSON","parse","startGroups","initial","columns","obj","forEach","el","id","name","id0","img","items","filter","groupId","map","groupName","getGroups","columnOrder","reorderList","list","startIndex","endIndex","result","Array","from","splice","removed","getStyle","draggableStyle","virtualStyle","combined","isDragging","backgroundColor","color","useStyles","makeStyles","theme","number","width","paddingRight","Item","provided","item","style","index","classes","ListItem","button","divider","draggableProps","dragHandleProps","ref","innerRef","className","ListItemText","primary","secondary","Row","React","memo","props","data","draggableId","areEqual","ItemListApp","column","open","setIsHover","listRef","useRef","useLayoutEffect","current","scrollTo","droppableId","mode","renderClone","snapshot","rubric","source","isDraggingOver","itemCount","isUsingPlaceholder","length","height","window","innerWidth","itemSize","outerRef","itemData","transition","background","left","top","opacity","Column","columnId","openStart","useState","setOpen","isHover","margin","title__wrap","border","padding","listItemText","fontSize","textTransform","whiteSpace","overflow","textOverflow","paddingLeft","icon","minWidth","position","lengthGroup","borderRadius","textAlign","verticalAlign","lineHeight","small","spacing","ItemList_wrap","ItemList_wrap2","handleClick","onClick","ListItemIcon","title","List","component","disablePadding","paddingTop","App","state","setState","setNewProductId","setNewGroupId","onDragEnd","destination","type","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","newState","Number","onDragStart","navigator","vibrate","droppableProps","Fragment","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49910c64.chunk.js","sourcesContent":["// const products = `[\r\n//     {\r\n//        \"id\": 1,\r\n//        \"name\": \"картофель\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 2,\r\n//        \"name\": \"помидоры\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 3,\r\n//        \"name\": \"клубника\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 4,\r\n//        \"name\": \"шоколад\",\r\n//        \"groupId\": 8,\r\n//        \"groupName\": \"кондитерские изделия\"\r\n//     },\r\n//     {\r\n//        \"id\": 5,\r\n//        \"name\": \"томаты\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 6,\r\n//        \"name\": \"яблоко\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 7,\r\n//        \"name\": \"пиво\",\r\n//        \"groupId\": 14,\r\n//        \"groupName\": \"алкогольные напитки\"\r\n//     },\r\n//     {\r\n//        \"id\": 8,\r\n//        \"name\": \"арахис\",\r\n//        \"groupId\": 22,\r\n//        \"groupName\": \"орехи и сухофрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 9,\r\n//        \"name\": \"туалетная бумага\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     },\r\n//     {\r\n//        \"id\": 10,\r\n//        \"name\": \"ягоды\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 11,\r\n//        \"name\": \"салат\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 12,\r\n//        \"name\": \"гранола\",\r\n//        \"groupId\": 6,\r\n//        \"groupName\": \"бакалея\"\r\n//     },\r\n//     {\r\n//        \"id\": 13,\r\n//        \"name\": \"папки\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     },\r\n//     {\r\n//        \"id\": 14,\r\n//        \"name\": \"ватные диски\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     },\r\n//     {\r\n//        \"id\": 15,\r\n//        \"name\": \"кофе\",\r\n//        \"groupId\": 13,\r\n//        \"groupName\": \"чай и кофе\"\r\n//     },\r\n//     {\r\n//        \"id\": 16,\r\n//        \"name\": \"бананы\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 17,\r\n//        \"name\": \"лаваш\",\r\n//        \"groupId\": 7,\r\n//        \"groupName\": \"выпечка\"\r\n//     },\r\n//     {\r\n//        \"id\": 18,\r\n//        \"name\": \"баклажаны\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 19,\r\n//        \"name\": \"шампунь\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     },\r\n//     {\r\n//        \"id\": 20,\r\n//        \"name\": \"вода минеральная\",\r\n//        \"groupId\": 12,\r\n//        \"groupName\": \"напитки\"\r\n//     },\r\n//     {\r\n//        \"id\": 21,\r\n//        \"name\": \"кукуруза\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 22,\r\n//        \"name\": \"овсянка\",\r\n//        \"groupId\": 6,\r\n//        \"groupName\": \"бакалея\"\r\n//     },\r\n//     {\r\n//        \"id\": 23,\r\n//        \"name\": \"тампоны\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     },\r\n//     {\r\n//        \"id\": 24,\r\n//        \"name\": \"растительное молоко\",\r\n//        \"groupId\": 4,\r\n//        \"groupName\": \"молочные продукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 25,\r\n//        \"name\": \"объединить список\",\r\n//        \"groupId\": 1,\r\n//        \"groupName\": \"разное\"\r\n//     },\r\n//     {\r\n//        \"id\": 26,\r\n//        \"name\": \"жвачку\",\r\n//        \"groupId\": 2,\r\n//        \"groupName\": \"кулинария\"\r\n//     },\r\n//     {\r\n//        \"id\": 27,\r\n//        \"name\": \"огурец\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 28,\r\n//        \"name\": \"перец\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 29,\r\n//        \"name\": \"груша\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 30,\r\n//        \"name\": \"итальянские травы\",\r\n//        \"groupId\": 11,\r\n//        \"groupName\": \"приправы\"\r\n//     },\r\n//     {\r\n//        \"id\": 31,\r\n//        \"name\": \"авокадо\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 32,\r\n//        \"name\": \"персики\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 33,\r\n//        \"name\": \"чай с травами\",\r\n//        \"groupId\": 13,\r\n//        \"groupName\": \"чай и кофе\"\r\n//     },\r\n//     {\r\n//        \"id\": 34,\r\n//        \"name\": \"клей\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     },\r\n//     {\r\n//        \"id\": 35,\r\n//        \"name\": \"стиральный порошок\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     },\r\n//     {\r\n//        \"id\": 36,\r\n//        \"name\": \"травяной чай\",\r\n//        \"groupId\": 13,\r\n//        \"groupName\": \"чай и кофе\"\r\n//     },\r\n//     {\r\n//        \"id\": 37,\r\n//        \"name\": \"средство для прочистки труб\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     },\r\n//     {\r\n//        \"id\": 38,\r\n//        \"name\": \"картошка\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 39,\r\n//        \"name\": \"петрушка\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 40,\r\n//        \"name\": \"соль\",\r\n//        \"groupId\": 11,\r\n//        \"groupName\": \"приправы\"\r\n//     },\r\n//     {\r\n//        \"id\": 41,\r\n//        \"name\": \"морковь\",\r\n//        \"groupId\": 21,\r\n//        \"groupName\": \"овощи и фрукты\"\r\n//     },\r\n//     {\r\n//        \"id\": 42,\r\n//        \"name\": \"гель для душа\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     },\r\n//     {\r\n//        \"id\": 43,\r\n//        \"name\": \"горшок для гибискуса\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     },\r\n//     {\r\n//        \"id\": 44,\r\n//        \"name\": \"очиститель труб\",\r\n//        \"groupId\": 17,\r\n//        \"groupName\": \"домашнее хозяйство\"\r\n//     }\r\n//  ]`;\r\n//  export const startProducts = JSON.parse(products);\r\n\r\nconst products = `[\r\n   {\r\n      \"id\": 1,\r\n      \"name\": \"картофель\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 2,\r\n      \"name\": \"помидоры\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 3,\r\n      \"name\": \"клубника\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 4,\r\n      \"name\": \"шоколад\",\r\n      \"groupId\": 8,\r\n      \"groupName\": \"кондитерские изделия\"\r\n   },\r\n   {\r\n      \"id\": 5,\r\n      \"name\": \"томаты\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 6,\r\n      \"name\": \"яблоко\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 7,\r\n      \"name\": \"пиво\",\r\n      \"groupId\": 14,\r\n      \"groupName\": \"алкогольные напитки\"\r\n   },\r\n   {\r\n      \"id\": 8,\r\n      \"name\": \"арахис\",\r\n      \"groupId\": 22,\r\n      \"groupName\": \"орехи и сухофрукты\"\r\n   },\r\n   {\r\n      \"id\": 9,\r\n      \"name\": \"туалетная бумага\",\r\n      \"groupId\": 17,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 10,\r\n      \"name\": \"ягоды\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 11,\r\n      \"name\": \"салат\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 12,\r\n      \"name\": \"гранола\",\r\n      \"groupId\": 6,\r\n      \"groupName\": \"бакалея\"\r\n   },\r\n   {\r\n      \"id\": 13,\r\n      \"name\": \"папки\",\r\n      \"groupId\": 17,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 14,\r\n      \"name\": \"ватные диски\",\r\n      \"groupId\": 17,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 15,\r\n      \"name\": \"кофе\",\r\n      \"groupId\": 13,\r\n      \"groupName\": \"чай и кофе\"\r\n   },\r\n   {\r\n      \"id\": 16,\r\n      \"name\": \"бананы\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 17,\r\n      \"name\": \"лаваш\",\r\n      \"groupId\": 7,\r\n      \"groupName\": \"выпечка\"\r\n   },\r\n   {\r\n      \"id\": 18,\r\n      \"name\": \"баклажаны\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 19,\r\n      \"name\": \"шампунь\",\r\n      \"groupId\": 17,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 20,\r\n      \"name\": \"вода минеральная\",\r\n      \"groupId\": 12,\r\n      \"groupName\": \"напитки\"\r\n   },\r\n   {\r\n      \"id\": 21,\r\n      \"name\": \"кукуруза\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 22,\r\n      \"name\": \"овсянка\",\r\n      \"groupId\": 6,\r\n      \"groupName\": \"бакалея\"\r\n   },\r\n   {\r\n      \"id\": 23,\r\n      \"name\": \"тампоны\",\r\n      \"groupId\": 17,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 24,\r\n      \"name\": \"растительное молоко\",\r\n      \"groupId\": 4,\r\n      \"groupName\": \"молочные продукты\"\r\n   },\r\n   {\r\n      \"id\": 25,\r\n      \"name\": \"объединить список\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"разное\"\r\n   },\r\n   {\r\n      \"id\": 26,\r\n      \"name\": \"жвачку\",\r\n      \"groupId\": 2,\r\n      \"groupName\": \"кулинария\"\r\n   },\r\n   {\r\n      \"id\": 27,\r\n      \"name\": \"огурец\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 28,\r\n      \"name\": \"перец\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 29,\r\n      \"name\": \"груша\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 30,\r\n      \"name\": \"итальянские травы\",\r\n      \"groupId\": 11,\r\n      \"groupName\": \"приправы\"\r\n   },\r\n   {\r\n      \"id\": 31,\r\n      \"name\": \"авокадо\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 32,\r\n      \"name\": \"персики\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 33,\r\n      \"name\": \"чай с травами\",\r\n      \"groupId\": 13,\r\n      \"groupName\": \"чай и кофе\"\r\n   },\r\n   {\r\n      \"id\": 34,\r\n      \"name\": \"клей\",\r\n      \"groupId\": 17,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 35,\r\n      \"name\": \"стиральный порошок\",\r\n      \"groupId\": 17,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 36,\r\n      \"name\": \"травяной чай\",\r\n      \"groupId\": 13,\r\n      \"groupName\": \"чай и кофе\"\r\n   },\r\n   {\r\n      \"id\": 37,\r\n      \"name\": \"средство для прочистки труб\",\r\n      \"groupId\": 17,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 38,\r\n      \"name\": \"картошка\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 39,\r\n      \"name\": \"петрушка\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 40,\r\n      \"name\": \"соль\",\r\n      \"groupId\": 11,\r\n      \"groupName\": \"приправы\"\r\n   },\r\n   {\r\n      \"id\": 41,\r\n      \"name\": \"морковь\",\r\n      \"groupId\": 21,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 42,\r\n      \"name\": \"гель для душа\",\r\n      \"groupId\": 17,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 43,\r\n      \"name\": \"горшок для гибискуса\",\r\n      \"groupId\": 17,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 44,\r\n      \"name\": \"очиститель труб\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 45,\r\n      \"name\": \"картофель\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 46,\r\n      \"name\": \"помидоры\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 47,\r\n      \"name\": \"клубника\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 48,\r\n      \"name\": \"шоколад\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"кондитерские изделия\"\r\n   },\r\n   {\r\n      \"id\": 49,\r\n      \"name\": \"томаты\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 50,\r\n      \"name\": \"яблоко\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 51,\r\n      \"name\": \"пиво\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"алкогольные напитки\"\r\n   },\r\n   {\r\n      \"id\": 52,\r\n      \"name\": \"арахис\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"орехи и сухофрукты\"\r\n   },\r\n   {\r\n      \"id\": 53,\r\n      \"name\": \"туалетная бумага\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   },\r\n   {\r\n      \"id\": 54,\r\n      \"name\": \"ягоды\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 55,\r\n      \"name\": \"салат\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"овощи и фрукты\"\r\n   },\r\n   {\r\n      \"id\": 56,\r\n      \"name\": \"гранола\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"бакалея\"\r\n   },\r\n   {\r\n      \"id\": 57,\r\n      \"name\": \"папки\",\r\n      \"groupId\": 1,\r\n      \"groupName\": \"домашнее хозяйство\"\r\n   }\r\n]`;\r\nexport const startProducts = JSON.parse(products);\r\n\r\n \r\n\r\n// const startProducts0 = JSON.parse(products);\r\n// const arr = [...startProducts0];\r\n\r\n// for (let i = 1; i <= 22 ; i++) {\r\n//    for (let j = 0; j <= 1000; j++) {\r\n//      arr.push({id: `${i}_${j}`, name: `name_${i}_${j}`, groupId: i, groupName: `groupName_${i}_${j}`})\r\n//    }   \r\n// }\r\n// export const startProducts = arr;\r\n\r\n\r\n\r\n\r\n const groups = `[\r\n     {\"id\":1,\"name\":\"разное\",\"img\":\"other.png\"},\r\n     {\"id\":2,\"name\":\"кулинария\",\"img\":\"cookery.png\"},\r\n     {\"id\":3,\"name\":\"деликатесы\",\"img\":\"delicatessen.png\"},\r\n     {\"id\":4,\"name\":\"молочные продукты\",\"img\":\"milk.png\"},\r\n     {\"id\":5,\"name\":\"морские продукты\",\"img\":\"sea-foods.png\"},\r\n     {\"id\":6,\"name\":\"бакалея\",\"img\":\"cereal.png\"},\r\n     {\"id\":7,\"name\":\"выпечка\",\"img\":\"bakery.png\"},\r\n     {\"id\":8,\"name\":\"кондитерские изделия\",\"img\":\"sweets.png\"},\r\n     {\"id\":9,\"name\":\"консервированные продукты\",\"img\":\"canned-food.png\"},\r\n     {\"id\":10,\"name\":\"масла\",\"img\":\"oils.png\"},\r\n     {\"id\":11,\"name\":\"приправы\",\"img\":\"spices.png\"},\r\n     {\"id\":12,\"name\":\"напитки\",\"img\":\"drinks.png\"},\r\n     {\"id\":13,\"name\":\"чай и кофе\",\"img\":\"coffee-and-tea.png\"},\r\n     {\"id\":14,\"name\":\"алкогольные напитки\",\"img\":\"alcohol.png\"},\r\n     {\"id\":15,\"name\":\"табачные изделия\",\"img\":\"tobacco.png\"},\r\n     {\"id\":16,\"name\":\"сыры\",\"img\":\"cheese.png\"},\r\n     {\"id\":17,\"name\":\"домашнее хозяйство\",\"img\":\"household.png\"},\r\n     {\"id\":18,\"name\":\"аптека\",\"img\":\"pharmacy.png\"},\r\n     {\"id\":19,\"name\":\"замороженные продукты\",\"img\":\"frozen-food.png\"},\r\n     {\"id\":20,\"name\":\"домашние питомцы\",\"img\":\"pets.png\"},\r\n     {\"id\":21,\"name\":\"овощи и фрукты\",\"img\":\"vegetables&fruits.png\"},\r\n     {\"id\":22,\"name\":\"орехи и сухофрукты\",\"img\":\"nuts-and-dried-fruits.png\"}\r\n]`;\r\nexport const startGroups = JSON.parse(groups);","import {startProducts} from './data'\r\nimport {startGroups} from './data'\r\n\r\nconst getItems = (id) => {\r\n  const arr = startProducts.filter(el => el.groupId === id).map(el => {\r\n    if (el.groupId === id) {\r\n      return {id: `${el.id}`, name: el.name, groupId: el.groupId, groupName: el.groupName}\r\n    }\r\n  });\r\n  return arr;\r\n}\r\n\r\nconst getGroups = () => {\r\n  const obj = {};\r\n  startGroups.forEach((el) => {\r\n    obj[`${el.name}`] = {id: `${el.name}`, id0: el.id, name: el.name, img: el.img, items: getItems(el.id)} \r\n  })\r\n  return obj;\r\n}\r\n\r\nconst initial = {\r\n  columns: getGroups(),                            \r\n  columnOrder: startGroups.map(el => el.name)      // [\"column-0\", \"column-1\"]\r\n};\r\n\r\nexport default function getInitialData() {\r\n  return initial;\r\n}","export function reorderList(list, startIndex, endIndex) {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n  \r\n    return result;\r\n  }\r\n  ","import React, {useState, useRef} from \"react\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import Avatar from '@material-ui/core/Avatar';\r\n// import ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\n// import AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\n// import MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\n\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n// import AppleIcon from '@material-ui/icons/Apple';\r\n\r\n\r\nconst ITEM_HEIGHT = 48;\r\n\r\nconst getStyle = ({ draggableStyle, virtualStyle, isDragging }) => {\r\n    const combined = {\r\n      ...virtualStyle,\r\n      ...draggableStyle\r\n    };  \r\n    const grid = 8;  \r\n\r\n    const result = {\r\n      ...combined,\r\n      // height: isDragging ? combined.height : combined.height - (grid*3),\r\n      // height: isDragging ? combined.height : combined.height - (grid),\r\n      // left: isDragging ? combined.left : combined.left + grid,\r\n      // width: isDragging\r\n      //   ? draggableStyle.width\r\n      //   : `calc(${combined.width} - ${grid * 3}px)`,\r\n\r\n      // left: isDragging ? combined.left : combined.left,\r\n      // marginBottom: grid,\r\n      // marginBottom: `${grid}px`,\r\n\r\n      // backgroundColor: '#aaa',\r\n      // backgroundColor: 'lightgrey',\r\n      backgroundColor: '#fff',\r\n      // borderRadius: '15px',\r\n      // color: 'rgba(0,0,0,.6)',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      \r\n      // border: '1px solid lightblue',\r\n      // boxShadow: '2px 2px #aaa',\r\n      // boxShadow: '0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)',\r\n      \r\n\r\n      // paddingRight: '0px',\r\n      // transition: 'background .4s',\r\n    };\r\n    return result;\r\n  }\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  number: {\r\n    width: 'auto',\r\n    paddingRight: '15px',\r\n  },\r\n}));\r\n\r\nconst Item = ({ provided, item, style, isDragging, index = ''}) => {\r\n  // debugger\r\n  const classes = useStyles();\r\n  // debugger\r\n\r\n\r\n  // const options = [\r\n  //   `id: ${item.id}`,\r\n  //   `name: ${item.name}`,\r\n  //   `groupId: ${item.groupId}`,\r\n  //   `groupName: ${item.groupName}`,\r\n  // ];\r\n\r\n  // const [anchorEl, setAnchorEl] = useState(null);\r\n  // const open = Boolean(anchorEl);\r\n\r\n  // const handleClick = (event) => {\r\n  //   setAnchorEl(event.currentTarget);\r\n  // };\r\n\r\n  // const handleClose = () => {\r\n  //   setAnchorEl(null);\r\n  // };\r\n\r\n    return (\r\n        <ListItem button divider \r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n          style={getStyle({\r\n            draggableStyle: provided.draggableProps.style,\r\n            virtualStyle: style,\r\n            isDragging\r\n          })}\r\n        className={`item ${isDragging ? \"is-dragging\" : \"\"}`}\r\n        >\r\n          {/* <ListItemText primary={item.name} /> */}\r\n  \r\n          <p className={classes.number}>{index+1}</p>\r\n\r\n          <ListItemText primary={item.name} secondary={item.groupName}/>\r\n\r\n          {/* <IconButton \r\n            edge=\"end\" \r\n            color=\"inherit\"\r\n            aria-label=\"more\"\r\n            aria-controls=\"long-menu\"\r\n            aria-haspopup=\"true\"\r\n            onClick={handleClick}\r\n          >\r\n            <MoreIcon />\r\n          </IconButton>\r\n          <Menu\r\n            id=\"long-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={open}\r\n            onClose={handleClose}\r\n            ref={menu}\r\n            PaperProps={{\r\n              style: {\r\n                maxHeight: ITEM_HEIGHT * 4.5,\r\n                // width: '20ch',\r\n              },\r\n            }}\r\n          >\r\n            {options.map((option) => (\r\n              <MenuItem key={option} selected={option === 'Pyxis'} onClick={handleClose}>\r\n                {option}\r\n              </MenuItem>\r\n            ))}\r\n          </Menu> */}\r\n        </ListItem>\r\n    );\r\n  }\r\nexport default Item;","import React from \"react\";\r\nimport { areEqual } from \"react-window\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport Item from './Item';\r\n\r\nconst Row = React.memo(function Row(props) {\r\n    const { data: items, index, style } = props;\r\n    const item = items[index];\r\n  \r\n    if (!item) {\r\n      return null;\r\n    }\r\n  \r\n    return (\r\n      <Draggable draggableId={item.id} index={index} key={item.id}>\r\n        {provided => <Item provided={provided} item={item} style={style} index={index} />}\r\n      </Draggable>\r\n    );\r\n  }, areEqual);\r\n  export default Row;","import React, { useLayoutEffect, useRef } from \"react\";\r\nimport { FixedSizeList } from \"react-window\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport Item from './Item';\r\nimport Row from './Row';\r\n\r\nconst ItemListApp = React.memo(function ItemList({ column, index, open, setIsHover }) {\r\n    const listRef = useRef();\r\n    useLayoutEffect(() => {\r\n      const list = listRef.current;\r\n      if (list) {\r\n        list.scrollTo(0);\r\n      }\r\n    }, [index]);\r\n\r\n    const getListStyle = (isDraggingOver) => {\r\n      if (!open && isDraggingOver) {\r\n        // debugger\r\n        setIsHover(false);\r\n      }\r\n      if (!open && !isDraggingOver) {\r\n        // debugger\r\n        setIsHover(true);\r\n      }\r\n\r\n      return {\r\n      transition: 'background .4s',\r\n      // background: open ? isDraggingOver ? 'rgb(189, 255, 217)' : 'lightblue' : isDraggingOver ? 'rgb(189, 255, 217)' : 'transparent',\r\n      background: open ? isDraggingOver ? '#bbb' : '#f5f5f5' : isDraggingOver ? '#bbb' : 'transparent',  \r\n      width: !open && '1%',\r\n      left: !open && '40%',\r\n      top: !open && '-45px',\r\n      // borderRadius: '15px',\r\n      opacity: !open && '0',\r\n    }};\r\n\r\n    const  listHeight = () => {\r\n      const sizeWindow = window.innerWidth;\r\n      if (sizeWindow > 900) {\r\n        return open ? 398 : 40;\r\n      }\r\n      return open ? 333 : 40;\r\n    }\r\n\r\n    return (\r\n      <Droppable\r\n        droppableId={column.id}\r\n        mode=\"virtual\"\r\n        renderClone={(provided, snapshot, rubric) => {\r\n  // debugger\r\n          return (<Item\r\n            provided={provided}\r\n            isDragging={snapshot.isDragging}\r\n            item={column.items[rubric.source.index]}\r\n            // style={getListStyle(snapshot.isDraggingOver)}\r\n          />\r\n        )}}\r\n      >\r\n        {(provided, snapshot) => {\r\n          const itemCount = snapshot.isUsingPlaceholder\r\n            ? column.items.length + 1\r\n            : column.items.length;\r\n\r\n        // const sizeKim = open ? 500 : 40;\r\n        // const sizeKim = open ? 333 : 40;\r\n  // debugger\r\n          return (\r\n            <FixedSizeList\r\n              // height={500}\r\n              // height={sizeKim}\r\n              height={listHeight()}\r\n              \r\n              itemCount={itemCount}\r\n              // itemSize={60}\r\n              itemSize={60}\r\n              // width={300}\r\n              outerRef={provided.innerRef}\r\n              itemData={column.items}\r\n              className=\"task-list\"\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n              ref={listRef}\r\n            >\r\n              {Row}\r\n            </FixedSizeList>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    );\r\n  });\r\n  export default ItemListApp;","import React, { useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n// import img from './images/p1.jpg'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListMaterialUI from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport Avatar from '@material-ui/core/Avatar';                           // img\r\nimport ItemListApp from './ItemList';\r\nimport Search from './Search';\r\n\r\nconst Column = React.memo(function Column({ column, index, columnId = null }) {\r\n  // debugger\r\n    const openStart = columnId === 'разное' ? true : false;\r\n    const [open, setOpen] = useState(openStart);\r\n    const [isHover, setIsHover] = useState(false);\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n      column: {\r\n        margin: '3px',\r\n        // padding: '1px',\r\n      },\r\n      title__wrap: {\r\n        border: '1px solid #ddd',\r\n        padding: '15px',\r\n        // backgroundColor: styleHover && 'red!important',\r\n        // backgroundColor: isHover ? '' : 'rgb(189, 255, 217)!important',\r\n        // backgroundColor: isHover ? '' : '#fff!important',\r\n\r\n        // backgroundColor: isHover ? '' : open ? 'rgb(160, 160, 255)!important' : 'rgb(189, 255, 217)!important',\r\n        backgroundColor: isHover ? '' : open ? '#f4f4f4!important' : '#bbb!important',\r\n        \r\n        // backgroundColor: columnId === 'разное' && '#fff!important',\r\n        transition: 'background .4s',\r\n      },\r\n      listItemText: {                  // title\r\n        fontSize:'.9rem',\r\n        textTransform: 'uppercase',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        paddingLeft: '8px',\r\n      },\r\n      icon: {\r\n        minWidth: '33px',\r\n        position: 'relative',\r\n      },\r\n      lengthGroup: {\r\n        position: 'absolute',\r\n        fontSize: '12px',\r\n        top: '-105%',\r\n        left: '55%',\r\n        backgroundColor: 'red',\r\n        color: '#fff',\r\n        borderRadius: '50%',\r\n        padding: '7% 13%',\r\n        textAlign: 'center',\r\n        verticalAlign: 'center',\r\n        lineHeight: '1em',\r\n      },\r\n      small: {                     // img avatar\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n      },\r\n      ItemList_wrap: {\r\n        // backgroundColor: 'lightblue',\r\n        backgroundColor: '#f5f5f5',\r\n        transition: 'background .4s',\r\n        // paddingTop: '3px',          // dont work only (+ItemList_wrap2)\r\n        // height: '40px',\r\n        // display: 'dlock!important',\r\n        // height: '0px',\r\n      },\r\n      ItemList_wrap2: {      \r\n        // padding: '3px',\r\n        // height: '30px',\r\n        // overflow: 'hidden',\r\n        // display: 'dlock!important',\r\n      },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleClick = () => {\r\n      setOpen(!open);\r\n    };\r\n  \r\n    const handleMouseOver2 = isDraggingOver => {\r\n      // debugger\r\n      if (isDraggingOver) {\r\n        setOpen(false);\r\n      }\r\n    };\r\n\r\n    const getListStyle = (isDraggingOver) => {\r\n      // debugger\r\n      if (isDraggingOver) {\r\n\r\n      }\r\n\r\n      return {\r\n      // background: isDraggingOver ? 'rgb(160, 160, 255)' : '#fff',\r\n      // background: isDraggingOver ? 'rgb(160, 160, 255)' : '#6fda44',    // column title wrap\r\n      // background: isDraggingOver ? 'rgb(160, 160, 255)' : 'rgb(160, 160, 255)',    // column title wrap\r\n      // background: isDraggingOver ? 'rgb(160, 160, 255)' :  open ? '#cacaff' : 'rgb(160, 160, 255)',    // column title wrap\r\n      // background: isDraggingOver ? 'rgb(160, 160, 255)' :  open ? 'rgb(160, 160, 255)' : '#cacaff',    // column title wrap\r\n      background: isDraggingOver ? '#a0a0ff' :  open ? '#f4f4f4' : '#ddd',    // column title wrap\r\n      // backgroundColor: open ? 'red!important' : 'black!important',\r\n\r\n      \r\n    }};\r\n\r\n    return (\r\n      <Draggable draggableId={column.id} index={index}>\r\n        {(provided, snapshot) => {\r\n// debugger\r\n          return (\r\n          <div\r\n            className={classes.column}\r\n            {...provided.draggableProps}\r\n            ref={provided.innerRef}\r\n            // style={getListStyle(snapshot.isDraggingOver)}\r\n            // style={getListStyle(snapshot.draggingOver)}\r\n\r\n            // style={{ backgroundColor: snapshot.isDraggingOver ? 'blue' : 'grey' }}\r\n            // style={{\r\n            //   backgroundColor: provided.isDragging ? 'green' : 'lightblue',\r\n            // }}\r\n            // style={getListStyleAll(provided.draggableProps)}\r\n            // style={getListStyleAll(provided.draggableProps['data-rbd-draggable-id'])}\r\n            // style={{\r\n            //   // color: provided.draggableProps['data-rbd-draggable-id'] === 'разное' ? 'green!important' : 'lightblue!important',\r\n            // }}\r\n          >\r\n              <ListItem button onClick={handleClick} {...provided.dragHandleProps} className={classes.title__wrap}\r\n                // onMouseOver={handleMouseOver(snapshot.isDraggingOver)}\r\n                // onMouseOver={handleMouseOver(snapshot.isDragging)}\r\n                // onMouseMove={handleMouseOver(snapshot.isDragging)}\r\n                style={getListStyle(snapshot.isDragging)}\r\n              >\r\n                <ListItemIcon className={classes.icon}>\r\n                  {column.items.length > 0 && <p className={classes.lengthGroup}>{column.items.length}</p>}\r\n                  <AddShoppingCartIcon />\r\n                  {/* <Avatar variant=\"rounded\" alt={column.name} src={column.img} className={classes.small} /> */}\r\n                  {/* <Avatar variant=\"rounded\" alt={column.name} src={img} className={classes.small} /> */}\r\n                </ListItemIcon>\r\n                <ListItemText primary={column.name} className={classes.title} classes={{primary:classes.listItemText}}/>\r\n                {/* <Search /> */}\r\n                {open ? <ExpandLess /> : <ExpandMore />}\r\n              </ListItem>\r\n              {/* <Collapse in={open} timeout=\"auto\" unmountOnExit className={classes.ItemList_wrap}> */}\r\n              <div className={classes.ItemList_wrap} >\r\n                <ListMaterialUI component=\"div\" disablePadding className={classes.ItemList_wrap2} style={{height: !open && '0px', paddingTop: open && '3px'}}>\r\n                    <ItemListApp column={column} index={index} \r\n                      open={open}\r\n                      setIsHover={setIsHover}\r\n                    />\r\n                </ListMaterialUI>\r\n              </div>\r\n              {/* </Collapse> */}\r\n          </div>\r\n          )}}\r\n      </Draggable>\r\n    );\r\n  });\r\n  export default Column;","import React, { useState, useEffect } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport getInitialData from \"./components/get-initial-data\";\nimport { reorderList } from \"./components/reorder\";\nimport './App.css';\nimport Column from './components/Column';\nimport axios from \"axios\";\n\nfunction App() {\n  const [state, setState] = useState(() => getInitialData());\n  const [newProductId, setNewProductId] = useState(null);\n  const [newGroupId, setNewGroupId] = useState(null);\n  // debugger\n  // const myArray = Object.values(state.columns).map(el => el.items).flat();\n  // const myArray2 = myArray.map(el => ({id: Number(el.id), name: el.name, groupId: el.groupId, groupName: el.groupName}));\n  // const myArray3 = myArray2.sort((a, b) => a.id - b.id);\n  // console.log(myArray3);\n\n  // useEffect(async () => {\n  //   debugger\n  //   if (newProductId && newGroupId) {\n  //     const api = 'https://helper-pepper.com/api/';\n  //     const id = 'asd';\n  //     try {\n  //       const response = await axios.put(`${api}product/${newProductId}/group/${newGroupId}/${id}`, \n  //         {\"body\":data}, \n  //         {\n  //           headers: {\n  //            'Content-Type': 'application/json'\n  //         },\n  //       });\n  //       console.log(response);\n  //     } catch (error) {\n  //       // console.log(error.response.data.error);\n  //       console.error(error);\n  //     }\n  //   }\n  // }, [newProductId, newGroupId])\n  \n  function onDragEnd(result) {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === \"column\") {\n      const columnOrder = reorderList(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      setState({\n        ...state,\n        columnOrder\n      });\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const items = reorderList(\n        column.items,\n        result.source.index,\n        // result.destination.index\n        0                            // kim order 0\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column.id]: {\n            ...column,\n            items\n          }\n        }\n      };\n      setState(newState);\n      return;\n    }\n\n    // moving between lists\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const item = sourceColumn.items[result.source.index];\n\n    // kim\n    item.groupId = destinationColumn.id0;     // kim rename\n    item.groupName = destinationColumn.id;    // kim rename\n\n    // 1. remove item from source column\n    const newSourceColumn = {\n      ...sourceColumn,\n      items: [...sourceColumn.items]\n    };\n    newSourceColumn.items.splice(result.source.index, 1);\n\n    // 2. insert into destination column\n    const newDestinationColumn = {\n      ...destinationColumn,\n      items: [...destinationColumn.items]\n    };\n    // in line modification of items\n    // newDestinationColumn.items.splice(result.destination.index, 0, item);\n    newDestinationColumn.items.splice(0, 0, item);   // kim order 0\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn\n      }\n    };\n// debugger\n    setState(newState);\n    setNewProductId(Number(item.id));\n    setNewGroupId(newDestinationColumn.id0);\n  }\n\n  // kim2 vibro\n  const onDragStart = () => {\n    if (window.navigator.vibrate) {\n      window.navigator.vibrate(100);\n    }\n  };\n\n  // provided\n  //   droppableProps:\n  //     data-rbd-droppable-context-id: \"1\"\n  return (\n    <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart} >\n      <div className=\"app\">\n        <div className=\"columns_wrap\">\n          <div>\n            <Droppable\n              droppableId=\"all-droppables1\"\n              // direction=\"horizontal\"\n              // direction=\"vertical\"\n              type=\"column\"\n            >\n              {(provided, snapshot) => {\n                // debugger\n                return (\n                <div\n                  className=\"columns\"\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {state.columnOrder.map((columnId, index) => (<React.Fragment key={columnId}>\n                    {columnId === 'разное' && (<Column\n                        // key={columnId}\n                        columnId={columnId}\n                        column={state.columns[columnId]}\n                        index={index}\n                      />)}</React.Fragment>\n                    ))}\n                  {provided.placeholder}\n                </div>\n              )}}\n            </Droppable>\n          </div>\n        <Droppable\n          droppableId=\"all-droppables\"\n          // direction=\"horizontal\"\n          // direction=\"vertical\"\n          type=\"column\"\n        >\n          {(provided, snapshot) => {\n            // debugger\n            return (\n            <div\n              className=\"columns\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {state.columnOrder.map((columnId, index) => (<React.Fragment key={columnId}>\n                {columnId !== 'разное' && (<Column\n                  // key={columnId}\n                  column={state.columns[columnId]}\n                  index={index}\n                />)}</React.Fragment>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}}\n        </Droppable>\n        </div>\n      </div>\n    </DragDropContext>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}